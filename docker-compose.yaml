services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: inventario-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inventario}
      POSTGRES_USER: ${POSTGRES_USER:-inventario}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-inventario_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - ./.docker/postgresql:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - inventario-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inventario} -d ${POSTGRES_DB:-inventario}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Inventario Application (Production)
  inventario:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: inventario-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      INVENTARIO_DB_DSN: "postgres://${POSTGRES_USER:-inventario}:${POSTGRES_PASSWORD:-inventario_password}@postgres:5432/${POSTGRES_DB:-inventario}?sslmode=disable"

      # Server configuration
      INVENTARIO_ADDR: "${INVENTARIO_ADDR:-:3333}"
      INVENTARIO_UPLOAD_LOCATION: "${INVENTARIO_UPLOAD_LOCATION:-file:///app/uploads?create_dir=1}"

      # Optional: Additional environment variables
      TZ: ${TZ:-UTC}
    volumes:
      # Persistent storage for uploads and data
      - ./.docker/inventario/uploads:/app/uploads
      - ./.docker/inventario/data:/app/data
    ports:
      - "${INVENTARIO_PORT:-3333}:3333"
    networks:
      - inventario-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/api/v1/settings"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database (Production)
  mysql:
    image: mysql:8.4
    container_name: inventario-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DB:-inventario}
      MYSQL_USER: ${MYSQL_USER:-inventario}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-inventario_password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - ./.docker/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - inventario-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER:-inventario}", "-p${MYSQL_PASSWORD:-inventario_password}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200

  # MariaDB Database (Production)
  mariadb:
    image: mariadb:10.11
    container_name: inventario-mariadb
    restart: unless-stopped
    environment:
      MARIADB_DATABASE: ${MARIADB_DB:-inventario}
      MARIADB_USER: ${MARIADB_USER:-inventario}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD:-inventario_password}
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-root_password}
      MARIADB_CHARSET: utf8mb4
      MARIADB_COLLATION: utf8mb4_unicode_ci
    volumes:
      - ./.docker/mariadb:/var/lib/mysql
    ports:
      - "${MARIADB_PORT:-3307}:3306"
    networks:
      - inventario-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200

  # PostgreSQL Test Database
  postgres-test:
    profiles: ["test"]
    image: postgres:15-alpine
    container_name: inventario-postgres-test
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB:-inventario_test}
      POSTGRES_USER: ${POSTGRES_TEST_USER:-inventario_test}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-test_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_TEST_PORT:-5433}:5432"  # Use different port to avoid conflicts
    networks:
      - inventario-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-inventario_test} -d ${POSTGRES_TEST_DB:-inventario_test}"]
      interval: 5s
      timeout: 3s
      retries: 10
    # Use tmpfs for faster tests and no persistence
    tmpfs:
      - /var/lib/postgresql/data
    # Automatically remove container after stopping
    restart: "no"
    # PostgreSQL configuration for testing
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=50
      -c random_page_cost=1.1
      -c effective_io_concurrency=100
      -c work_mem=2MB
      -c min_wal_size=512MB
      -c max_wal_size=1GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=1
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=1

  # MySQL Test Database
  mysql-test:
    profiles: ["test"]
    image: mysql:8.4
    container_name: inventario-mysql-test
    environment:
      MYSQL_DATABASE: ${MYSQL_TEST_DB:-inventario_test}
      MYSQL_USER: ${MYSQL_TEST_USER:-inventario_test}
      MYSQL_PASSWORD: ${MYSQL_TEST_PASSWORD:-test_password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_TEST_ROOT_PASSWORD:-test_root_password}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_TEST_PORT:-3308}:3306"  # Use different port to avoid conflicts
    networks:
      - inventario-test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_TEST_USER:-inventario_test}", "-p${MYSQL_TEST_PASSWORD:-test_password}"]
      interval: 5s
      timeout: 3s
      retries: 10
    # Use tmpfs for faster tests and no persistence
    tmpfs:
      - /var/lib/mysql
    # Automatically remove container after stopping
    restart: "no"
    # MySQL configuration for testing
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=64M
      --innodb-log-file-size=32M
      --max-connections=200
      --innodb-flush-log-at-trx-commit=0
      --sync-binlog=0
      --innodb-doublewrite=0

  # MariaDB Test Database
  mariadb-test:
    profiles: ["test"]
    image: mariadb:10.11
    container_name: inventario-mariadb-test
    environment:
      MARIADB_DATABASE: ${MARIADB_TEST_DB:-inventario_test}
      MARIADB_USER: ${MARIADB_TEST_USER:-inventario_test}
      MARIADB_PASSWORD: ${MARIADB_TEST_PASSWORD:-test_password}
      MARIADB_ROOT_PASSWORD: ${MARIADB_TEST_ROOT_PASSWORD:-test_root_password}
      MARIADB_CHARSET: utf8mb4
      MARIADB_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${MARIADB_TEST_PORT:-3309}:3306"  # Use different port to avoid conflicts
    networks:
      - inventario-test-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 5s
      timeout: 3s
      retries: 10
    # Use tmpfs for faster tests and no persistence
    tmpfs:
      - /var/lib/mysql
    # Automatically remove container after stopping
    restart: "no"
    # MariaDB configuration for testing
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=64M
      --innodb-log-file-size=32M
      --max-connections=200
      --innodb-flush-log-at-trx-commit=0
      --sync-binlog=0
      --innodb-doublewrite=0

  # Database Migration Service (Test)
  inventario-migrate:
    profiles: ["test"]
    build:
      context: .
      dockerfile: Dockerfile
      target: test-runner
    container_name: inventario-migrate-runner
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      # PostgreSQL test configuration
      POSTGRES_TEST_DSN: "postgres://${POSTGRES_TEST_USER:-inventario_test}:${POSTGRES_TEST_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_TEST_DB:-inventario_test}?sslmode=disable&pool_max_conns=5&pool_min_conns=1"
    networks:
      - inventario-test-network
    volumes:
      # Mount source code for development testing
      - ./go:/app/go:ro
    working_dir: /app/go
    # Run migrations
    command: ["go", "run", ".", "migrate", "--db-dsn=postgres://${POSTGRES_TEST_USER:-inventario_test}:${POSTGRES_TEST_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_TEST_DB:-inventario_test}?sslmode=disable&pool_max_conns=5&pool_min_conns=1"]
    # Automatically remove container after stopping
    restart: "no"

  # Inventario Test Runner
  inventario-test:
    profiles: ["test"]
    build:
      context: .
      dockerfile: Dockerfile
      target: test-runner
    container_name: inventario-test-runner
    depends_on:
      postgres-test:
        condition: service_healthy
      inventario-migrate:
        condition: service_completed_successfully
    environment:
      # PostgreSQL test configuration
      POSTGRES_TEST_DSN: "postgres://${POSTGRES_TEST_USER:-inventario_test}:${POSTGRES_TEST_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_TEST_DB:-inventario_test}?sslmode=disable&pool_max_conns=5&pool_min_conns=1"

      # Test configuration
      GO_TEST_TIMEOUT: "${GO_TEST_TIMEOUT:-10m}"
      GO_TEST_VERBOSE: "${GO_TEST_VERBOSE:-true}"

      # Application configuration for tests
      INVENTARIO_DB_DSN: "postgres://${POSTGRES_TEST_USER:-inventario_test}:${POSTGRES_TEST_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_TEST_DB:-inventario_test}?sslmode=disable&pool_max_conns=1&pool_min_conns=1"
      INVENTARIO_ADDR: ":3333"
      INVENTARIO_UPLOAD_LOCATION: "file:///tmp/test-uploads?create_dir=1"

      # Test environment
      TZ: UTC
    networks:
      - inventario-test-network
    volumes:
      # Mount source code for development testing
      - ./go:/app/go:ro
      - ./frontend:/app/frontend:ro
      # Temporary upload location
      - /tmp/test-uploads
    working_dir: /app/go
    # Default command runs all tests
    command: ["go", "test", "-v", "-timeout", "${GO_TEST_TIMEOUT:-10m}", "./..."]
    # Automatically remove container after stopping
    restart: "no"

  # Inventario PostgreSQL-only Test Runner
  inventario-test-postgres:
    profiles: ["test"]
    build:
      context: .
      dockerfile: Dockerfile
      target: test-runner
    container_name: inventario-postgres-test-runner
    depends_on:
      postgres-test:
        condition: service_healthy
      inventario-migrate:
        condition: service_completed_successfully
    environment:
      # PostgreSQL test configuration
      POSTGRES_TEST_DSN: "postgres://${POSTGRES_TEST_USER:-inventario_test}:${POSTGRES_TEST_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_TEST_DB:-inventario_test}?sslmode=disable&pool_max_conns=1&pool_min_conns=1"

      # Test configuration
      GO_TEST_TIMEOUT: "${GO_TEST_TIMEOUT:-10m}"
      GO_TEST_VERBOSE: "${GO_TEST_VERBOSE:-true}"

      # Test environment
      TZ: UTC
    networks:
      - inventario-test-network
    volumes:
      # Mount source code for development testing
      - ./go:/app/go:ro
    working_dir: /app/go
    # Command runs only PostgreSQL tests (sequential to avoid connection issues)
    command: ["go", "test", "-v", "-timeout", "${GO_TEST_TIMEOUT:-10m}", "-p", "1", "./registry/postgres/..."]
    # Automatically remove container after stopping
    restart: "no"

networks:
  # Production network
  inventario-network:
    driver: bridge

  # Test network
  inventario-test-network:
    driver: bridge

volumes:
  # Named volumes for easier management (optional, using bind mounts above)
  postgres-data:
  mysql-data:
  mariadb-data:
  inventario-uploads:
  inventario-data:

  # Test volumes (optional, using tmpfs above)
  postgres-test-data:
  mysql-test-data:
  mariadb-test-data:
