// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/denisvmedia/inventario/issues",
            "email": "ask@artprima.cz"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/clusters/{id}": {
            "put": {
                "description": "Update by location data",
                "consumes": [
                    "application/vnd.api+json"
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location object",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.Errors"
                        }
                    },
                    "422": {
                        "description": "User-side request problem",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.Errors"
                        }
                    }
                }
            }
        },
        "/location": {
            "get": {
                "description": "get locations",
                "consumes": [
                    "application/vnd.api+json"
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "List locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationsResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "post": {
                "description": "add by location data",
                "consumes": [
                    "application/vnd.api+json"
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "description": "Location object",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Location created",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.Errors"
                        }
                    },
                    "422": {
                        "description": "User-side request problem",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.Errors"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "description": "get location by ID",
                "consumes": [
                    "application/vnd.api+json"
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.LocationResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete by location ID",
                "consumes": [
                    "application/vnd.api+json"
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.Errors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "jsonapi.Error": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        },
        "jsonapi.Errors": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jsonapi.Error"
                    }
                }
            }
        },
        "jsonapi.LocationRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Location"
                }
            }
        },
        "jsonapi.LocationResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/models.Location"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "locations"
                    ],
                    "example": "locations"
                }
            }
        },
        "jsonapi.LocationsMeta": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                }
            }
        },
        "jsonapi.LocationsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Location"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/jsonapi.LocationsMeta"
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Inventario API",
	Description:      "This is an Inventario daemon.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
